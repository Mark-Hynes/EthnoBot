<!DOCTYPE html>
<html lang="en">
<head>
    <title>API Demo | Jcrop Demo</title>
    <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
    <script type="text/javascript" src="http://cdn.rawgit.com/tapmodo/Jcrop/master/js/jquery.Jcrop.min.js"></script>
    <script src="~/Scripts/jquery-3.3.1.min.js"></script>
    <script src="~/Scripts/jquery.Jcrop.js"></script>
 
    <script type="text/javascript">
  jQuery(function($){

    // The variable jcrop_api will hold a reference to the
    // Jcrop API once Jcrop is instantiated.
    var jcrop_api;

    // In this example, since Jcrop may be attached or detached
    // at the whim of the user, I've wrapped the call into a function
    initJcrop();

    // The function is pretty simple
    function initJcrop()//{{{
    {
      // Hide any interface elements that require Jcrop
      // (This is for the local user interface portion.)
      $('.requiresjcrop').hide();

      // Invoke Jcrop in typical fashion
      $('#target').Jcrop({
        onRelease: releaseCheck
      },function(){

        jcrop_api = this;
          jcrop_api.animateTo([100, 100, 300, 180]);
          jcrop_api.setOptions({ allowResize: false });
          jcrop_api.setOptions({ allowSelect: false });
          jcrop_api.setOptions(this.checked ? {
              minSize: [300, 180],
              maxSize: [300, 180]
          } : {
                  minSize: [300, 180],
                  maxSize: [300, 180]
              });
          

        // Setup and dipslay the interface for "enabled"
          $('#can_move,#ar_lock,#size_lock').attr('checked','checked');
          $('#can_click,#bg_swap,#can_size').attr('checked',false);
        $('.requiresjcrop').show();

      });

    };
    //}}}

    // Use the API to find cropping dimensions
    // Then generate a random selection
    // This function is used by setSelect and animateTo buttons
    // Mainly for demonstration purposes
    function getRandom() {
      var dim = jcrop_api.getBounds();
      return [
        Math.round(Math.random() * dim[0]),
        Math.round(Math.random() * dim[1]),
        Math.round(Math.random() * dim[0]),
        Math.round(Math.random() * dim[1])
      ];
    };

      $('#file').change(function () {
          $('#target').hide();
          var reader = new FileReader();
          reader.onload = function (e) {
              $('#target').show();
              $('#target').attr("src", e.target.result);
              jcrop_api.setImage(e.target.result);
              jcrop_api.setOptions({ bgOpacity: .6 });
              $('#target').Jcrop({
                  onChange: SetCoordinates,
                  onSelect: SetCoordinates
              });
          }
          reader.readAsDataURL($(this)[0].files[0]);
          
       
      });

      $('#btnCrop').click(function () {
          var x1 = $('#imgX1').val();
          var y1 = $('#imgY1').val();
          var width = $('#imgWidth').val();
          var height = $('#imgHeight').val();
          var canvas = document.getElementById("MyCanvas");
          var context = canvas.getContext('2d');
          var img = document.getElementById("target");
          img.onload = function () {
              canvas.height = height;
              canvas.width = width;
              context.drawImage(img, x1, y1, width, height, 0, 0, width, height);
              $('#file').val(img);
              $('[id*=btnUpload]').show();
          };
          img.src = $('#target').attr("src");
      });
 
        function SetCoordinates(c) {
            $('#imgX1').val(c.x);
            $('#imgY1').val(c.y);
            $('#imgWidth').val(c.w);
            $('#imgHeight').val(c.h);
            $('#btnCrop').show();
        };

    // This function is bound to the onRelease handler...
    // In certain circumstances (such as if you set minSize
    // and aspectRatio together), you can inadvertently lose
    // the selection. This callback re-enables creating selections
    // in such a case. Although the need to do this is based on a
    // buggy behavior, it's recommended that you in some way trap
    // the onRelease callback if you use allowSelect: false
    function releaseCheck()
    {
      jcrop_api.setOptions({ allowSelect: false });
        jcrop_api.animateTo([100, 100, 300, 180]);
    };

    // Attach interface buttons
    // This may appear to be a lot of code but it's simple stuff

    $('#animateTo').click(function(e) {
      // Animates to a random selection
      jcrop_api.animateTo(getRandom());
    });


    $('#enable').click(function(e) {
      // Re-enable Jcrop instance
      jcrop_api.enable();
      // Update the interface to reflect enabled state
      $('#enable').hide();
      $('.requiresjcrop').show();
    });
    $('#rehook').click(function(e) {
      // This button is visible when Jcrop has been destroyed
      // It performs the re-attachment and updates the UI
      $('#rehook,#enable').hide();
      initJcrop();
      $('#unhook,.requiresjcrop').show();
      return false;
    });


    // Hook up the three image-swapping buttons
    $('#img1').click(function(e) {
      $(this).addClass('active').closest('.btn-group')
        .find('button.active').not(this).removeClass('active');

      jcrop_api.setImage('demo_files/sago.jpg');
      jcrop_api.setOptions({ bgOpacity: .6 });
      return false;
    });
    $('#img2').click(function(e) {
      $(this).addClass('active').closest('.btn-group')
        .find('button.active').not(this).removeClass('active');

      jcrop_api.setImage('demo_files/pool.jpg');
      jcrop_api.setOptions({ bgOpacity: .6 });
      return false;
    });
    $('#img3').click(function(e) {
      $(this).addClass('active').closest('.btn-group')
        .find('button.active').not(this).removeClass('active');

      jcrop_api.setImage('demo_files/sago.jpg',function(){
        this.setOptions({
          bgOpacity: 1,
          outerImage: 'demo_files/sagomod.jpg'
        });
        this.animateTo(getRandom());
      });
      return false;
    });

    // The checkboxes simply set options based on it's checked value
    // Options are changed by passing a new options object

    // Also, to prevent strange behavior, they are initially checked
    // This matches the default initial state of Jcrop

    $('#can_move').change(function(e) {
      jcrop_api.setOptions({ allowMove: !!this.checked });
      jcrop_api.focus();
    });
    $('#can_size').change(function(e) {
      jcrop_api.setOptions({ allowResize: false });
      jcrop_api.focus();
    });
    $('#ar_lock').change(function(e) {
      jcrop_api.setOptions(this.checked?
        { aspectRatio: 300/180 }: { aspectRatio: 0 });
      jcrop_api.focus();
    });
    $('#size_lock').change(function(e) {
      jcrop_api.setOptions(this.checked? {
        minSize: [ 300, 180 ],
        maxSize: [ 300, 180 ]
      }: {
        minSize: [ 300, 180 ],
        maxSize: [ 300, 180 ]
      });
      jcrop_api.focus();
    });

  });


    </script>
    <link rel="stylesheet" href="~/Content/demo_files/main.css" type="text/css" />
    <link rel="stylesheet" href="~/Content/demo_files/demos.css" type="text/css" />
    <link rel="stylesheet" href="~/Content/jquery.Jcrop.css" type="text/css" />
    <style type="text/css">
        .optdual {
            position: relative;
        }

            .optdual .offset {
                position: absolute;
                left: 18em;
            }

        .optlist label {
            width: 16em;
            display: block;
        }

        #dl_links {
            margin-top: .5em;
        }
    </style>

</head>
<body>

    <div class="container">
        <div class="row">
            <div class="span12">
                <div class="jc-demo-box">

                    <div class="page-header">

                        <h1>API Demo</h1>
                    </div>
                    <canvas id="MyCanvas"></canvas>
                        <img src="~/Images/Two.png" id="target" alt="[Jcrop Example]" />
                
                        <fieldset class="requiresjcrop" style="margin: .5em 0;">
                        <legend>Change Image</legend>
                        <div class="btn-group">
                            <input type="hidden" name="imgX1" id="imgX1" />
                            <input type="hidden" name="imgY1" id="imgY1" />
                            <input type="hidden" name="imgWidth" id="imgWidth" />
                            <input type="hidden" name="imgHeight" id="imgHeight" />
                            @using (Html.BeginForm("FileUpload", "Manage", FormMethod.Post,
                            new { enctype = "multipart/form-data" }))
                            {
                            <form>
                                <input type="file" name="file" id="file" accept=".jpg,.png,.gif" style="width:300px;height:180px" />
                                <input id="btnCrop" type="submit" value="Upload" class="submit" />
                            </form>
                            }
                        </div>

                    </fieldset>
                    <div class="clearfix"></div>

                </div>
            </div>
        </div>
    </div>

</body>
</html>

